#!/usr/bin/env python
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

            1: 1
            3: 1,3
            6: 1,2,3,6
           10: 1,2,5,10
           15: 1,3,5,15
           21: 1,3,7,21
           28: 1,2,4,7,14,28

   We can see that 28 is the first triangle number to have over five divisors.

   What is the value of the first triangle number to have over five hundred divisors?
"""

import itertools
import operator
from functools import reduce
from collections import defaultdict
import lib

def euler_12(target):
    """
    Here are 2 solutions to the problem.  num_factors uses standard factorization, and
    num_factors2 uses prime factorization.  The prime factorization method, when memoized, runs significantly faster
    in python.  However, both methods are comparable when using pypy (~3.1 secs on a 1.6ghz core2 laptop)
    """
    tempgen = (n for n in triangle_gen() if num_factors_standard(n) > target)
    #tempgen = (n for n in triangle_gen() if num_factors_via_prime(n) > target)
    return list(itertools.islice(tempgen, 0, 1))[0]

def triangle_gen():
    acc = 1
    counter = 2

    while True:
        acc += counter
        counter += 1
        yield acc

def num_factors_standard(n):
    retval = 0
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            if n / i == i:
                retval += 1
            else:
                retval += 2

    return retval

"""
Alternative solution
This solution uses prime factorization instead of raw factorization.
"""
def num_factors_via_prime(n):
    primes = lib.prime_gen()
    current_prime = next(primes)

    x = n
    pfacts = defaultdict(int)
    while not is_prime(n):
        while (n % current_prime) == 0:
            n = n // current_prime
            pfacts[current_prime] += 1
        current_prime = next(primes)

    if (n != 1):
        pfacts[n] += 1

    return reduce(operator.mul, (x + 1 for x in pfacts.values()), 1)

if __name__ == "__main__":
    print(euler_12(500))
